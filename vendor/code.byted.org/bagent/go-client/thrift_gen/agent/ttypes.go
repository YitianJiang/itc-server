// Autogenerated by Thrift Compiler (0.9.2)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package agent

import (
	"bytes"
	"code.byted.org/bagent/go-client/thrift_gen/base"
	"code.byted.org/gopkg/thrift"
	"fmt"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var _ = base.GoUnusedProtection__
var GoUnusedProtection__ int

type ValueStatus int64

const (
	ValueStatus_OK          ValueStatus = 0
	ValueStatus_NOT_EXIST   ValueStatus = 1
	ValueStatus_FETCH_ERROR ValueStatus = 2
	ValueStatus_RATE_LIMIT  ValueStatus = 3
)

func (p ValueStatus) String() string {
	switch p {
	case ValueStatus_OK:
		return "ValueStatus_OK"
	case ValueStatus_NOT_EXIST:
		return "ValueStatus_NOT_EXIST"
	case ValueStatus_FETCH_ERROR:
		return "ValueStatus_FETCH_ERROR"
	case ValueStatus_RATE_LIMIT:
		return "ValueStatus_RATE_LIMIT"
	}
	return "<UNSET>"
}

func ValueStatusFromString(s string) (ValueStatus, error) {
	switch s {
	case "ValueStatus_OK":
		return ValueStatus_OK, nil
	case "ValueStatus_NOT_EXIST":
		return ValueStatus_NOT_EXIST, nil
	case "ValueStatus_FETCH_ERROR":
		return ValueStatus_FETCH_ERROR, nil
	case "ValueStatus_RATE_LIMIT":
		return ValueStatus_RATE_LIMIT, nil
	}
	return ValueStatus(0), fmt.Errorf("not a valid ValueStatus string")
}

func ValueStatusPtr(v ValueStatus) *ValueStatus { return &v }

type Value struct {
	Value  string      `thrift:"value,1,required" json:"value"`
	Status ValueStatus `thrift:"status,2,required" json:"status"`
}

func NewValue() *Value {
	return &Value{}
}

func (p *Value) GetValue() string {
	return p.Value
}

func (p *Value) GetStatus() ValueStatus {
	return p.Status
}
func (p *Value) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Value) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Value = v
	}
	return nil
}

func (p *Value) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		temp := ValueStatus(v)
		p.Status = temp
	}
	return nil
}

func (p *Value) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Value"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *Value) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("value", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:value: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Value)); err != nil {
		return fmt.Errorf("%T.value (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:value: %s", p, err)
	}
	return err
}

func (p *Value) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:status: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Status)); err != nil {
		return fmt.Errorf("%T.status (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:status: %s", p, err)
	}
	return err
}

func (p *Value) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Value(%+v)", *p)
}

type AddrItem struct {
	Ip     string `thrift:"ip,1,required" json:"ip"`
	Weight int32  `thrift:"weight,2,required" json:"weight"`
}

func NewAddrItem() *AddrItem {
	return &AddrItem{}
}

func (p *AddrItem) GetIp() string {
	return p.Ip
}

func (p *AddrItem) GetWeight() int32 {
	return p.Weight
}
func (p *AddrItem) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AddrItem) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Ip = v
	}
	return nil
}

func (p *AddrItem) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Weight = v
	}
	return nil
}

func (p *AddrItem) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AddrItem"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AddrItem) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ip", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:ip: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Ip)); err != nil {
		return fmt.Errorf("%T.ip (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:ip: %s", p, err)
	}
	return err
}

func (p *AddrItem) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("weight", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:weight: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Weight)); err != nil {
		return fmt.Errorf("%T.weight (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:weight: %s", p, err)
	}
	return err
}

func (p *AddrItem) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddrItem(%+v)", *p)
}

type FetchAddressListRequest struct {
	PSM string `thrift:"PSM,1,required" json:"PSM"`
	Tag string `thrift:"Tag,2" json:"Tag"`
	// unused fields # 3 to 254
	Base *base.Base `thrift:"Base,255" json:"Base"`
}

func NewFetchAddressListRequest() *FetchAddressListRequest {
	return &FetchAddressListRequest{
		Tag: "online",
	}
}

func (p *FetchAddressListRequest) GetPSM() string {
	return p.PSM
}

var FetchAddressListRequest_Tag_DEFAULT string = "online"

func (p *FetchAddressListRequest) GetTag() string {
	return p.Tag
}

var FetchAddressListRequest_Base_DEFAULT *base.Base

func (p *FetchAddressListRequest) GetBase() *base.Base {
	if !p.IsSetBase() {
		return FetchAddressListRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *FetchAddressListRequest) IsSetTag() bool {
	return p.Tag != FetchAddressListRequest_Tag_DEFAULT
}

func (p *FetchAddressListRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *FetchAddressListRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 255:
			if err := p.ReadField255(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *FetchAddressListRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.PSM = v
	}
	return nil
}

func (p *FetchAddressListRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Tag = v
	}
	return nil
}

func (p *FetchAddressListRequest) ReadField255(iprot thrift.TProtocol) error {
	p.Base = &base.Base{}
	if err := p.Base.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Base, err)
	}
	return nil
}

func (p *FetchAddressListRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("FetchAddressListRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField255(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *FetchAddressListRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("PSM", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:PSM: %s", p, err)
	}
	if err := oprot.WriteString(string(p.PSM)); err != nil {
		return fmt.Errorf("%T.PSM (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:PSM: %s", p, err)
	}
	return err
}

func (p *FetchAddressListRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetTag() {
		if err := oprot.WriteFieldBegin("Tag", thrift.STRING, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:Tag: %s", p, err)
		}
		if err := oprot.WriteString(string(p.Tag)); err != nil {
			return fmt.Errorf("%T.Tag (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:Tag: %s", p, err)
		}
	}
	return err
}

func (p *FetchAddressListRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
		return fmt.Errorf("%T write field begin error 255:Base: %s", p, err)
	}
	if err := p.Base.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Base, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 255:Base: %s", p, err)
	}
	return err
}

func (p *FetchAddressListRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FetchAddressListRequest(%+v)", *p)
}

type FetchAddressListResponse struct {
	Addrs            []*AddrItem `thrift:"Addrs,1" json:"Addrs"`
	DowngradeMethods []string    `thrift:"DowngradeMethods,2" json:"DowngradeMethods"`
	// unused fields # 3 to 254
	BaseResp *base.BaseResp `thrift:"BaseResp,255" json:"BaseResp"`
}

func NewFetchAddressListResponse() *FetchAddressListResponse {
	return &FetchAddressListResponse{}
}

func (p *FetchAddressListResponse) GetAddrs() []*AddrItem {
	return p.Addrs
}

func (p *FetchAddressListResponse) GetDowngradeMethods() []string {
	return p.DowngradeMethods
}

var FetchAddressListResponse_BaseResp_DEFAULT *base.BaseResp

func (p *FetchAddressListResponse) GetBaseResp() *base.BaseResp {
	if !p.IsSetBaseResp() {
		return FetchAddressListResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *FetchAddressListResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *FetchAddressListResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 255:
			if err := p.ReadField255(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *FetchAddressListResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*AddrItem, 0, size)
	p.Addrs = tSlice
	for i := 0; i < size; i++ {
		_elem0 := &AddrItem{}
		if err := _elem0.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem0, err)
		}
		p.Addrs = append(p.Addrs, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *FetchAddressListResponse) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.DowngradeMethods = tSlice
	for i := 0; i < size; i++ {
		var _elem1 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem1 = v
		}
		p.DowngradeMethods = append(p.DowngradeMethods, _elem1)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *FetchAddressListResponse) ReadField255(iprot thrift.TProtocol) error {
	p.BaseResp = &base.BaseResp{}
	if err := p.BaseResp.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.BaseResp, err)
	}
	return nil
}

func (p *FetchAddressListResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("FetchAddressListResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField255(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *FetchAddressListResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Addrs", thrift.LIST, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:Addrs: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Addrs)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.Addrs {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:Addrs: %s", p, err)
	}
	return err
}

func (p *FetchAddressListResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("DowngradeMethods", thrift.LIST, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:DowngradeMethods: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.DowngradeMethods)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.DowngradeMethods {
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:DowngradeMethods: %s", p, err)
	}
	return err
}

func (p *FetchAddressListResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		return fmt.Errorf("%T write field begin error 255:BaseResp: %s", p, err)
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.BaseResp, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 255:BaseResp: %s", p, err)
	}
	return err
}

func (p *FetchAddressListResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FetchAddressListResponse(%+v)", *p)
}

type FetchConfigRequest struct {
	Keys []string `thrift:"Keys,1,required" json:"Keys"`
	Tag  string   `thrift:"Tag,2" json:"Tag"`
	// unused fields # 3 to 254
	Base *base.Base `thrift:"Base,255" json:"Base"`
}

func NewFetchConfigRequest() *FetchConfigRequest {
	return &FetchConfigRequest{
		Tag: "online",
	}
}

func (p *FetchConfigRequest) GetKeys() []string {
	return p.Keys
}

var FetchConfigRequest_Tag_DEFAULT string = "online"

func (p *FetchConfigRequest) GetTag() string {
	return p.Tag
}

var FetchConfigRequest_Base_DEFAULT *base.Base

func (p *FetchConfigRequest) GetBase() *base.Base {
	if !p.IsSetBase() {
		return FetchConfigRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *FetchConfigRequest) IsSetTag() bool {
	return p.Tag != FetchConfigRequest_Tag_DEFAULT
}

func (p *FetchConfigRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *FetchConfigRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 255:
			if err := p.ReadField255(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *FetchConfigRequest) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.Keys = tSlice
	for i := 0; i < size; i++ {
		var _elem2 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem2 = v
		}
		p.Keys = append(p.Keys, _elem2)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *FetchConfigRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Tag = v
	}
	return nil
}

func (p *FetchConfigRequest) ReadField255(iprot thrift.TProtocol) error {
	p.Base = &base.Base{}
	if err := p.Base.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Base, err)
	}
	return nil
}

func (p *FetchConfigRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("FetchConfigRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField255(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *FetchConfigRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Keys", thrift.LIST, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:Keys: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Keys)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.Keys {
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:Keys: %s", p, err)
	}
	return err
}

func (p *FetchConfigRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetTag() {
		if err := oprot.WriteFieldBegin("Tag", thrift.STRING, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:Tag: %s", p, err)
		}
		if err := oprot.WriteString(string(p.Tag)); err != nil {
			return fmt.Errorf("%T.Tag (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:Tag: %s", p, err)
		}
	}
	return err
}

func (p *FetchConfigRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
		return fmt.Errorf("%T write field begin error 255:Base: %s", p, err)
	}
	if err := p.Base.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Base, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 255:Base: %s", p, err)
	}
	return err
}

func (p *FetchConfigRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FetchConfigRequest(%+v)", *p)
}

type FetchConfigResponse struct {
	Configs map[string]*Value `thrift:"Configs,1,required" json:"Configs"`
	// unused fields # 2 to 254
	BaseResp *base.BaseResp `thrift:"BaseResp,255" json:"BaseResp"`
}

func NewFetchConfigResponse() *FetchConfigResponse {
	return &FetchConfigResponse{}
}

func (p *FetchConfigResponse) GetConfigs() map[string]*Value {
	return p.Configs
}

var FetchConfigResponse_BaseResp_DEFAULT *base.BaseResp

func (p *FetchConfigResponse) GetBaseResp() *base.BaseResp {
	if !p.IsSetBaseResp() {
		return FetchConfigResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *FetchConfigResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *FetchConfigResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 255:
			if err := p.ReadField255(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *FetchConfigResponse) ReadField1(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string]*Value, size)
	p.Configs = tMap
	for i := 0; i < size; i++ {
		var _key3 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key3 = v
		}
		_val4 := &Value{}
		if err := _val4.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _val4, err)
		}
		p.Configs[_key3] = _val4
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *FetchConfigResponse) ReadField255(iprot thrift.TProtocol) error {
	p.BaseResp = &base.BaseResp{}
	if err := p.BaseResp.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.BaseResp, err)
	}
	return nil
}

func (p *FetchConfigResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("FetchConfigResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField255(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *FetchConfigResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Configs", thrift.MAP, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:Configs: %s", p, err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.Configs)); err != nil {
		return fmt.Errorf("error writing map begin: %s", err)
	}
	for k, v := range p.Configs {
		if err := oprot.WriteString(string(k)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return fmt.Errorf("error writing map end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:Configs: %s", p, err)
	}
	return err
}

func (p *FetchConfigResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		return fmt.Errorf("%T write field begin error 255:BaseResp: %s", p, err)
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.BaseResp, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 255:BaseResp: %s", p, err)
	}
	return err
}

func (p *FetchConfigResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FetchConfigResponse(%+v)", *p)
}

type FetchUploadInfosRequest struct {
	Infos map[string]string `thrift:"Infos,1,required" json:"Infos"`
	// unused fields # 2 to 254
	Base *base.Base `thrift:"Base,255" json:"Base"`
}

func NewFetchUploadInfosRequest() *FetchUploadInfosRequest {
	return &FetchUploadInfosRequest{}
}

func (p *FetchUploadInfosRequest) GetInfos() map[string]string {
	return p.Infos
}

var FetchUploadInfosRequest_Base_DEFAULT *base.Base

func (p *FetchUploadInfosRequest) GetBase() *base.Base {
	if !p.IsSetBase() {
		return FetchUploadInfosRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *FetchUploadInfosRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *FetchUploadInfosRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 255:
			if err := p.ReadField255(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *FetchUploadInfosRequest) ReadField1(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string]string, size)
	p.Infos = tMap
	for i := 0; i < size; i++ {
		var _key5 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key5 = v
		}
		var _val6 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_val6 = v
		}
		p.Infos[_key5] = _val6
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *FetchUploadInfosRequest) ReadField255(iprot thrift.TProtocol) error {
	p.Base = &base.Base{}
	if err := p.Base.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Base, err)
	}
	return nil
}

func (p *FetchUploadInfosRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("FetchUploadInfosRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField255(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *FetchUploadInfosRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Infos", thrift.MAP, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:Infos: %s", p, err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Infos)); err != nil {
		return fmt.Errorf("error writing map begin: %s", err)
	}
	for k, v := range p.Infos {
		if err := oprot.WriteString(string(k)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return fmt.Errorf("error writing map end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:Infos: %s", p, err)
	}
	return err
}

func (p *FetchUploadInfosRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
		return fmt.Errorf("%T write field begin error 255:Base: %s", p, err)
	}
	if err := p.Base.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Base, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 255:Base: %s", p, err)
	}
	return err
}

func (p *FetchUploadInfosRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FetchUploadInfosRequest(%+v)", *p)
}

type FetchUploadInfosResponse struct {
	// unused fields # 1 to 254
	BaseResp *base.BaseResp `thrift:"BaseResp,255" json:"BaseResp"`
}

func NewFetchUploadInfosResponse() *FetchUploadInfosResponse {
	return &FetchUploadInfosResponse{}
}

var FetchUploadInfosResponse_BaseResp_DEFAULT *base.BaseResp

func (p *FetchUploadInfosResponse) GetBaseResp() *base.BaseResp {
	if !p.IsSetBaseResp() {
		return FetchUploadInfosResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *FetchUploadInfosResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *FetchUploadInfosResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 255:
			if err := p.ReadField255(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *FetchUploadInfosResponse) ReadField255(iprot thrift.TProtocol) error {
	p.BaseResp = &base.BaseResp{}
	if err := p.BaseResp.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.BaseResp, err)
	}
	return nil
}

func (p *FetchUploadInfosResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("FetchUploadInfosResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField255(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *FetchUploadInfosResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		return fmt.Errorf("%T write field begin error 255:BaseResp: %s", p, err)
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.BaseResp, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 255:BaseResp: %s", p, err)
	}
	return err
}

func (p *FetchUploadInfosResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FetchUploadInfosResponse(%+v)", *p)
}

type GetTonfigRequest struct {
	KeyPath string `thrift:"KeyPath,1,required" json:"KeyPath"`
	Version string `thrift:"Version,2,required" json:"Version"`
	// unused fields # 3 to 254
	Base *base.Base `thrift:"Base,255" json:"Base"`
}

func NewGetTonfigRequest() *GetTonfigRequest {
	return &GetTonfigRequest{}
}

func (p *GetTonfigRequest) GetKeyPath() string {
	return p.KeyPath
}

func (p *GetTonfigRequest) GetVersion() string {
	return p.Version
}

var GetTonfigRequest_Base_DEFAULT *base.Base

func (p *GetTonfigRequest) GetBase() *base.Base {
	if !p.IsSetBase() {
		return GetTonfigRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *GetTonfigRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetTonfigRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 255:
			if err := p.ReadField255(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetTonfigRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.KeyPath = v
	}
	return nil
}

func (p *GetTonfigRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Version = v
	}
	return nil
}

func (p *GetTonfigRequest) ReadField255(iprot thrift.TProtocol) error {
	p.Base = &base.Base{}
	if err := p.Base.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Base, err)
	}
	return nil
}

func (p *GetTonfigRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetTonfigRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField255(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetTonfigRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("KeyPath", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:KeyPath: %s", p, err)
	}
	if err := oprot.WriteString(string(p.KeyPath)); err != nil {
		return fmt.Errorf("%T.KeyPath (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:KeyPath: %s", p, err)
	}
	return err
}

func (p *GetTonfigRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Version", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:Version: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Version)); err != nil {
		return fmt.Errorf("%T.Version (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:Version: %s", p, err)
	}
	return err
}

func (p *GetTonfigRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
		return fmt.Errorf("%T write field begin error 255:Base: %s", p, err)
	}
	if err := p.Base.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Base, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 255:Base: %s", p, err)
	}
	return err
}

func (p *GetTonfigRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetTonfigRequest(%+v)", *p)
}

type GetTonfigResponse struct {
	Kvs map[string]string `thrift:"Kvs,1" json:"Kvs"`
	// unused fields # 2 to 254
	BaseResp *base.BaseResp `thrift:"BaseResp,255" json:"BaseResp"`
}

func NewGetTonfigResponse() *GetTonfigResponse {
	return &GetTonfigResponse{}
}

func (p *GetTonfigResponse) GetKvs() map[string]string {
	return p.Kvs
}

var GetTonfigResponse_BaseResp_DEFAULT *base.BaseResp

func (p *GetTonfigResponse) GetBaseResp() *base.BaseResp {
	if !p.IsSetBaseResp() {
		return GetTonfigResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *GetTonfigResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *GetTonfigResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 255:
			if err := p.ReadField255(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetTonfigResponse) ReadField1(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string]string, size)
	p.Kvs = tMap
	for i := 0; i < size; i++ {
		var _key7 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key7 = v
		}
		var _val8 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_val8 = v
		}
		p.Kvs[_key7] = _val8
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *GetTonfigResponse) ReadField255(iprot thrift.TProtocol) error {
	p.BaseResp = &base.BaseResp{}
	if err := p.BaseResp.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.BaseResp, err)
	}
	return nil
}

func (p *GetTonfigResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetTonfigResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField255(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetTonfigResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Kvs", thrift.MAP, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:Kvs: %s", p, err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Kvs)); err != nil {
		return fmt.Errorf("error writing map begin: %s", err)
	}
	for k, v := range p.Kvs {
		if err := oprot.WriteString(string(k)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return fmt.Errorf("error writing map end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:Kvs: %s", p, err)
	}
	return err
}

func (p *GetTonfigResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		return fmt.Errorf("%T write field begin error 255:BaseResp: %s", p, err)
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.BaseResp, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 255:BaseResp: %s", p, err)
	}
	return err
}

func (p *GetTonfigResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetTonfigResponse(%+v)", *p)
}
